language: rust
cache: cargo

env:
  global:
    # This will be part of the release tarball
    # TODO change the project name
    - PROJECT_NAME=termex
    # TODO comment out this variable if you don't want to build .deb packages on all the targets.
    - MAKE_DEB=yes
    # TODO update these two variables. They are part of the .deb package metadata
    - DEB_MAINTAINER="Sathya Narrayanan <sathyanarrayanan@yandex.com>"
    - DEB_DESCRIPTION="Sync terminal"

matrix:
  include:
    # Stable channel
    - os: linux
      rust: stable
      env: TARGET=aarch64-unknown-linux-gnu
      # need Trusty because the glibc in Precise is too old and doesn't support 64-bit arm
      dist: trusty
      sudo: required
      # Extra packages only for this job
      addons:
        apt:
          packages: &aarch64_unknown_linux_gnu
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    - os: linux
      rust: stable
      env: TARGET=armv7-unknown-linux-gnueabihf
      # sudo is needed for binfmt_misc, which is needed for transparent user qemu emulation
      sudo: required
      addons:
        apt:
          packages: &armv7_unknown_linux_gnueabihf
            # Cross compiler and cross compiled C libraries
            - gcc-arm-linux-gnueabihf
            - libc6-armhf-cross
            - libc6-dev-armhf-cross
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    - os: osx
      rust: stable
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: &i686_unknown_linux_gnu
            # Cross compiler and cross compiled C libraries
            - gcc-multilib
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: &musl_packages
          - musl
          - musl-dev
          - musl-tools
    - os: osx
      rust: stable
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *musl_packages
    # Beta channel
    - os: linux
      rust: beta
      env: TARGET=aarch64-unknown-linux-gnu
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *aarch64_unknown_linux_gnu
    - os: linux
      rust: beta
      env: TARGET=armv7-unknown-linux-gnueabihf
      sudo: required
      addons:
        apt:
          # Use the same packages the stable version uses
          packages: *armv7_unknown_linux_gnueabihf
    - os: osx
      rust: beta
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: *i686_unknown_linux_gnu
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *musl_packages
    - os: osx
      rust: beta
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *musl_packages
    # Nightly channel
    - os: linux
      rust: nightly
      env: TARGET=aarch64-unknown-linux-gnu
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *aarch64_unknown_linux_gnu
    - os: linux
      rust: nightly
      env: TARGET=armv7-unknown-linux-gnueabihf
      sudo: required
      addons:
        apt:
          # Use the same packages the stable version uses
          packages: *armv7_unknown_linux_gnueabihf
    - os: osx
      rust: nightly
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: *i686_unknown_linux_gnu
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *musl_packages
    - os: osx
      rust: nightly
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *musl_packages
  allow_failures:
    # TODO You might need to allow failures for some target on some channel for some reason. Below
    # there's one (commented out) example of how to do that. Just change the OS, channel and TARGET
    # as needed.
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-gnu

before_install:
  - export PATH="$PATH:$HOME/.cargo/bin"

install:
  - bash ci/install.sh

script:
  - bash ci/script.sh

before_deploy:
  - bash ci/before_deploy.sh

deploy:
  provider: releases
  api_key:
    secure: "eSxI8yqnJFO8NNAqt7RmVUVSft3OgwKWN0U1eAQQ79g7u1us1nY69S8qShPpG6xPjRxayPn24rZPa7xv26yIclOCbGeJBEnLuYvP5cNSw55w/lhruWK8l3y7caP8jBLV1bbiYVcmQx0JUWu/oPuHmLdd7wWpmVjzUhD+3a0tXcS10/YrNQ7qZ+xgDRz1J/6ZLB+KFs6x2nfwyMjEqcshfXi+p3CbBgy2FJBJ4IHcThaWc/ZrdgEXpqqTrP/b6sAQhpxfNBdu2U0fLBJNv9x3ecBvNtsJzj2k4lZvecIitMA8WK26Pz54QKso39K2zgiPCBV6HYxfGH0PynxT2nPMNSw6i12spvC1GKU7VgX6ZYuVug7RkjBYsrgjpwPsust5sn9cNCX7KThU1qfMY3J/SEabCOge3K28PGcCdcWHg7lhZ/MuxAYPOrlEnO3K2AVCj9wkQd9mdond6cNrFBLuXFipmhvH6c+YhwksEyKKYk8xjx+mA+gjP3OZV2pAjTbDPHpsWkWxqlmkeTK947JGco5KRzi/akfl0CJDwlF+DnnBaGmLeQ8eeUIFfUojylxKMWo9cjqdLxqF5TskW+m9G/4QANtEKe0c21XO7wdfG3GwyaCTK6HggX2WAtIIhQHcjME9uHPvW1xjFZ0tKax6Pu/L8B9vM8bHNCiPBYX730M="
  file_glob: true
  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*
  skip_cleanup: true
  on:
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true

branches:
  only:
    - dev

notifications:
  email:
    on_success: never